from dataclasses import dataclass

from aiogram.types import ReplyKeyboardMarkup

from models.models import *

KEYBOARDS = {
    "ENG": [
        ["üë§My profile"],
        ["üí£Attack number"]
    ],
    "RU": [
        ["üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"],
        ["üí£–ê—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä"]
    ]
}

TEXT = {
    "type": {
        "start": {
            "ENG": "ü§ñUBI is BOT\n Help - /help",
            "RU": "ü§ñUBI –ë–æ—Ç\n –ü–æ–º–æ—â—å - /help"
        },
        "attack": {
            "circles": {
                "ENG": "Received 30 circles for attack.",
                "RU": "–ü–æ–ª—É—á–µ–Ω–æ 30 –∫—Ä—É–≥–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏."
            },
            "phone": {
                "ENG": "/cancel - Cancel\nEnter phone number:",
                "RU": "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
            },
        },
        "change_language": {
            "ENG": "üåêSelect the language",
            "RU": "üåê–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"
        },
        "cancel": {
            "ENG": "Canceled",
            "RU": "–û—Ç–º–µ–Ω–µ–Ω–æ"
        },
        "correct_phone": {
            "ENG": "You only need to enter numbers\n/cancel - –û—Ç–º–µ–Ω–∏—Ç—å",
            "RU": "–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n/cancel - –û—Ç–º–µ–Ω–∏—Ç—å"
        },
        "stop_attack": {
            "ENG": "Stop the attack?",
            "RU": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ç–∞–∫—É?"
        }
    }
}

@dataclass
class Language:
    user_id: int
    symbol: str

    def __init__(self, user_id="", symbol=""):
        self.user_id = user_id
        self.symbol = symbol

    async def update(self):
        user_data = await UserData.objects.get(username=self.user_id)
        await user_data.update(language=self.symbol)

    def text(self, type):
        return TEXT["type"][type][self.symbol]
    
    def set_circles_text(self, type=""):
        return TEXT["type"]["attack"]["circles"][self.symbol]

    def set_phone_text(self, type=""):
        return TEXT["type"]["attack"]["phone"][self.symbol]

    def keyboard(self, symbol=""):
        if self.symbol:
            return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=KEYBOARDS[self.symbol])
        elif symbol:
            return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=KEYBOARDS[symbol])
        else:
            return None

    def extend_keyboards(self):
        keyboard = KEYBOARDS["ENG"][:]
        keyboard.extend(KEYBOARDS["RU"])
        return keyboard